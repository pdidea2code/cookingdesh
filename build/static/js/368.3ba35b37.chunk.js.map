{"version":3,"file":"static/js/368.3ba35b37.chunk.js","mappings":"6RAsBA,MAyJA,EAzJuBA,KACrB,MAAM,SACJC,EAAQ,UACRC,EAAS,SACTC,EAAQ,aACRC,EAAY,YACZC,EACAC,WAAW,OAAEC,KACXC,EAAAA,EAAAA,MACEC,GAAWC,EAAAA,EAAAA,OACVC,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,KAClCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAMC,IAAWJ,EAAAA,EAAAA,UAAS,KAC3B,MAAEK,IAAUC,EAAAA,EAAAA,MA6DlB,OAfAC,EAAAA,EAAAA,YAAU,KACR,GAAIF,EAAO,CACT,MAAM,SAAEG,GAAaH,EACrBN,EAAYS,EAASC,KACrBnB,EAAS,OAAQkB,EAASE,MACL,MAAjBF,EAASL,MAEXb,EAAS,OAAQkB,EAASL,KAAKM,KAEjCnB,EAAS,SAAUkB,EAASG,OAC9B,MACEf,EAAS,eAnDGgB,WACd,IACE,MACMC,SADcC,EAAAA,EAAAA,OACDD,KAAKE,KACxBX,EAAQS,EACV,CAAE,MAAOG,GACFA,EAAMC,SAASJ,KAAKK,QAGvBhB,GAAa,GAFbiB,EAAAA,GAAMH,MAAMA,EAAMC,SAASJ,KAAKO,QAIpC,GA0CAC,EAAS,GACR,KAEDC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBC,UACnCF,EAAAA,EAAAA,KAACG,EAAAA,GAAU,CAACF,UAAU,OAAMC,UAC1BF,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAAAF,UACHF,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACC,GAAI,EAAEJ,UACVK,EAAAA,EAAAA,MAACC,EAAAA,GAAK,CAAAN,SAAA,EACJF,EAAAA,EAAAA,KAACS,EAAAA,GAAW,CAAAP,UACVF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,uBAEVK,EAAAA,EAAAA,MAACG,EAAAA,GAAS,CAAAR,SAAA,EACRF,EAAAA,EAAAA,KAACW,EAAAA,GAAc,KACfJ,EAAAA,EAAAA,MAACK,EAAAA,GAAK,CAACX,UAAU,WAAWY,SAAU5C,GArDlCsB,IAChBuB,QAAQC,IAAIxB,GACC,KAAbf,GACIwC,EAAAA,EAAAA,IAAczB,GACX0B,MAAMC,IACL5C,EAAS,cAAc,IAExB6C,OAAOC,IACDA,EAAIzB,SAASJ,KAAKK,QAGrBhB,GAAa,GAFbiB,EAAAA,GAAMH,MAAM0B,EAAIzB,SAASJ,KAAKO,QAGhC,KAEJuB,EAAAA,EAAAA,IAAiB9B,EAAMf,GACpByC,MAAMC,IACL5C,EAAS,cAAe,CAAES,MAAO,CAAEuC,GAAIvC,EAAMG,SAASqC,WAAa,IAEpEJ,OAAOC,IACDA,EAAIzB,SAASJ,KAAKK,QAGrBC,EAAAA,GAAMH,MAAM,yBAFZG,EAAAA,GAAMH,MAAM,mCAIdd,GAAa,EAAM,GACnB,IA4BiEsB,SAAA,EAC3DK,EAAAA,EAAAA,MAACF,EAAAA,GAAI,CAACmB,GAAI,EAAGlB,GAAI,GAAGJ,SAAA,EAClBF,EAAAA,EAAAA,KAACyB,EAAAA,GAAU,CAAAvB,SAAC,gBACZF,EAAAA,EAAAA,KAAC0B,EAAAA,GAAU,CACTC,KAAK,OACLL,GAAG,yBACCxD,EAAS,OAAQ,CACnB8D,SAAU,2BAEZC,YAAY,kBACZC,UAAW1D,EAAOgB,QAEpBY,EAAAA,EAAAA,KAAC+B,EAAAA,GAAa,CAACD,SAAO,EAAA5B,SAAC,+BAEzBK,EAAAA,EAAAA,MAACF,EAAAA,GAAI,CAACmB,GAAI,EAAGlB,GAAI,GAAGJ,SAAA,EAClBF,EAAAA,EAAAA,KAACyB,EAAAA,GAAU,CAAAvB,SAAC,YACZF,EAAAA,EAAAA,KAAC0B,EAAAA,GAAU,CACTC,KAAK,OACLL,GAAG,yBACCxD,EAAS,SAAU,CACrB8D,SAAU,2BAEZC,YAAY,oBACZC,UAAW1D,EAAOiB,UAEpBW,EAAAA,EAAAA,KAAC+B,EAAAA,GAAa,CAACD,SAAO,EAAA5B,SAAC,+BAEzBK,EAAAA,EAAAA,MAACF,EAAAA,GAAI,CAACmB,GAAI,EAAGlB,GAAI,GAAGJ,SAAA,EAClBF,EAAAA,EAAAA,KAACyB,EAAAA,GAAU,CAAAvB,SAAC,UACZK,EAAAA,EAAAA,MAACyB,EAAAA,GAAW,CACVV,GAAG,OACHlC,KAAK,UACDtB,EAAS,QACbgE,UAAW1D,EAAO6D,UAClBC,MAAOnE,EAAU,QACjBoE,SAAWC,GA1GV9C,OAAO+C,EAAWC,KACrCpE,EAAYmE,EAAWC,GACvBtE,EAASqE,EAAWC,EAAW,EAwGIC,CAAa,OAAQH,EAAEI,OAAON,OAAOhC,SAAA,EAEtDF,EAAAA,EAAAA,KAAA,UAAQkC,MAAM,GAAEhC,SAAC,gBACZ,OAAJrB,QAAI,IAAJA,OAAI,EAAJA,EAAM4D,KAAKC,IACV1C,EAAAA,EAAAA,KAAA,UAAyBkC,MAAOQ,EAAOvD,IAAIe,SACxCwC,EAAOtD,MADGsD,EAAOvD,UAKvBf,EAAO6D,YAAajC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,SAAQC,SAAE9B,EAAO6D,UAAUnC,cAEjEE,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACmB,GAAI,EAAGlB,GAAI,GAAIL,UAAU,2BAA0BC,SACtDvB,GACC4B,EAAAA,EAAAA,MAACoC,EAAAA,GAAO,CAACC,UAAQ,EAAA1C,SAAA,EACfF,EAAAA,EAAAA,KAAC6C,EAAAA,GAAQ,CAACC,UAAU,OAAOC,KAAK,KAAK,cAAY,SAAS,iBAI5D/C,EAAAA,EAAAA,KAAC2C,EAAAA,GAAO,CAAChB,KAAK,SAAS1B,UAAU,YAAWC,SAC5B,KAAb1B,EAAkB,MAAQ,6BAUzC,C","sources":["views/pages/recipe/IngredientForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CFormFeedback,\r\n  CFormInput,\r\n  CFormLabel,\r\n  CRow,\r\n  CSpinner,\r\n  CFormSelect,\r\n} from '@coreui/react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useLocation, useNavigate } from 'react-router-dom'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { addIngredient, getAllUnit, updateIngredient } from 'src/redux/api/api'\r\n\r\nconst IngredientForm = () => {\r\n  const {\r\n    register,\r\n    getValues,\r\n    setValue,\r\n    handleSubmit,\r\n    clearErrors,\r\n    formState: { errors },\r\n  } = useForm()\r\n  const navigate = useNavigate()\r\n  const [isUpdate, setIsUpdate] = useState('')\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [unit, setUnit] = useState([])\r\n  const { state } = useLocation()\r\n  const handleChange = async (fieldName, fieldValue) => {\r\n    clearErrors(fieldName, fieldValue)\r\n    setValue(fieldName, fieldValue)\r\n  }\r\n\r\n  const getunit = async () => {\r\n    try {\r\n      const respo = await getAllUnit()\r\n      const data = respo.data.info\r\n      setUnit(data)\r\n    } catch (error) {\r\n      if (!error.response.data.success) {\r\n        toast.error(error.response.data.message)\r\n      } else {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n  }\r\n  const onSubmit = (data) => {\r\n    console.log(data)\r\n    isUpdate === ''\r\n      ? addIngredient(data)\r\n          .then((res) => {\r\n            navigate('/Ingredient')\r\n          })\r\n          .catch((err) => {\r\n            if (!err.response.data.success) {\r\n              toast.error(err.response.data.message)\r\n            } else {\r\n              setIsLoading(false)\r\n            }\r\n          })\r\n      : updateIngredient(data, isUpdate)\r\n          .then((res) => {\r\n            navigate('/Ingredient', { state: { id: state.editData.recipeid } })\r\n          })\r\n          .catch((err) => {\r\n            if (!err.response.data.success) {\r\n              toast.error('Must be Fill All Field required')\r\n            } else {\r\n              toast.error('Something Went Wrong!')\r\n            }\r\n            setIsLoading(false)\r\n          })\r\n  }\r\n  useEffect(() => {\r\n    if (state) {\r\n      const { editData } = state\r\n      setIsUpdate(editData._id)\r\n      setValue('name', editData.name)\r\n      if (editData.unit == null) {\r\n      } else {\r\n        setValue('unit', editData.unit._id)\r\n      }\r\n      setValue('amount', editData.amount)\r\n    } else {\r\n      navigate('/Ingredient')\r\n    }\r\n    getunit()\r\n  }, [])\r\n  return (\r\n    <div className=\" bg-light min-vh-100\">\r\n      <CContainer className=\"mt-3\">\r\n        <CRow>\r\n          <CCol md={8}>\r\n            <CCard>\r\n              <CCardHeader>\r\n                <strong>Ingredient Form</strong>\r\n              </CCardHeader>\r\n              <CCardBody>\r\n                <ToastContainer />\r\n                <CForm className=\"row g-3 \" onSubmit={handleSubmit(onSubmit)}>\r\n                  <CCol xl={6} md={12}>\r\n                    <CFormLabel>Ingredient</CFormLabel>\r\n                    <CFormInput\r\n                      type=\"text\"\r\n                      id=\"validationDefault01\"\r\n                      {...register('name', {\r\n                        required: 'Ingredient is required',\r\n                      })}\r\n                      placeholder=\"ingredient name\"\r\n                      invalid={!!errors.name}\r\n                    />\r\n                    <CFormFeedback invalid>Ingredient is required</CFormFeedback>\r\n                  </CCol>\r\n                  <CCol xl={6} md={12}>\r\n                    <CFormLabel>Amount</CFormLabel>\r\n                    <CFormInput\r\n                      type=\"text\"\r\n                      id=\"validationDefault01\"\r\n                      {...register('amount', {\r\n                        required: 'Ingredient is required',\r\n                      })}\r\n                      placeholder=\"ingredient amount\"\r\n                      invalid={!!errors.amount}\r\n                    />\r\n                    <CFormFeedback invalid>Ingredient is required</CFormFeedback>\r\n                  </CCol>\r\n                  <CCol xl={6} md={12}>\r\n                    <CFormLabel>Unit</CFormLabel>\r\n                    <CFormSelect\r\n                      id=\"unit\"\r\n                      name=\"unit\"\r\n                      {...register('unit')}\r\n                      invalid={!!errors.languages}\r\n                      value={getValues('unit')}\r\n                      onChange={(e) => handleChange('unit', e.target.value)}\r\n                    >\r\n                      <option value=\"\">Select Unit</option>\r\n                      {unit?.map((option) => (\r\n                        <option key={option._id} value={option._id}>\r\n                          {option.name}\r\n                        </option>\r\n                      ))}\r\n                    </CFormSelect>\r\n                    {errors.languages && <div className=\"errors\">{errors.languages.message}</div>}\r\n                  </CCol>\r\n                  <CCol xl={6} md={12} className=\"text-center submitButton\">\r\n                    {isLoading ? (\r\n                      <CButton disabled>\r\n                        <CSpinner component=\"span\" size=\"sm\" aria-hidden=\"true\" />\r\n                        Loading...\r\n                      </CButton>\r\n                    ) : (\r\n                      <CButton type=\"submit\" className=\"AddButton\">\r\n                        {isUpdate === '' ? 'Add' : 'Update'}\r\n                      </CButton>\r\n                    )}\r\n                  </CCol>\r\n                </CForm>\r\n              </CCardBody>\r\n            </CCard>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default IngredientForm\r\n"],"names":["IngredientForm","register","getValues","setValue","handleSubmit","clearErrors","formState","errors","useForm","navigate","useNavigate","isUpdate","setIsUpdate","useState","isLoading","setIsLoading","unit","setUnit","state","useLocation","useEffect","editData","_id","name","amount","async","data","getAllUnit","info","error","response","success","toast","message","getunit","_jsx","className","children","CContainer","CRow","CCol","md","_jsxs","CCard","CCardHeader","CCardBody","ToastContainer","CForm","onSubmit","console","log","addIngredient","then","res","catch","err","updateIngredient","id","recipeid","xl","CFormLabel","CFormInput","type","required","placeholder","invalid","CFormFeedback","CFormSelect","languages","value","onChange","e","fieldName","fieldValue","handleChange","target","map","option","CButton","disabled","CSpinner","component","size"],"sourceRoot":""}