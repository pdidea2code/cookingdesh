{"version":3,"file":"static/js/503.3658f8f6.chunk.js","mappings":"ySAYA,MAmQA,EAnQgBA,MACGC,EAAAA,EAAAA,MAAjB,MACOC,EAAeC,IAAgBC,EAAAA,EAAAA,UAAS,KAEzC,SACJC,EAAQ,UACRC,EAAS,SACTC,EAAQ,aACRC,EAAY,YACZC,EACAC,WAAW,OAAEC,KACXC,EAAAA,EAAAA,OAoCJC,EAAAA,EAAAA,YAAU,KAlCOC,WACf,IACE,MACMC,SADYC,EAAAA,EAAAA,OACUC,KAAKC,KAAKC,KAAKC,IAAI,IAC1CA,EACHC,SAAUD,EAAKE,OAAOC,SACtBC,SAAUJ,EAAKK,OAAOC,SAGxBvB,EAAaY,EACf,CAAE,MAAOY,GACPC,QAAQC,IAAIF,GACRA,EAAIG,UAAYH,EAAIG,SAASb,OAASU,EAAIG,SAASb,KAAKc,QACzB,MAA7BJ,EAAIG,SAASb,KAAKe,OACpBC,EAAAA,GAAMC,MAAMP,EAAIG,SAASb,KAAKkB,SAE9BF,EAAAA,GAAMC,MAAMP,EAAIG,SAASb,KAAKkB,SAAW,iCAG3CF,EAAAA,GAAMC,MAAM,gCAEhB,GAcAE,EAAU,GACT,IAsKH,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAc,KAYfJ,EAAAA,EAAAA,MAACK,EAAAA,GAAK,CAACC,UAAU,eAAeC,SAAUpC,GAhM7BM,UACf,IACE,MAAM+B,QAAYC,EAAAA,EAAAA,IAAa7B,EAAK8B,WAEpCd,EAAAA,GAAMF,QAAQc,EAAI5B,KAAKkB,QACzB,CAAE,MAAOD,GACPD,EAAAA,GAAMC,MAAMA,EAAMJ,SAASb,KAAKkB,SAAW,gCAC7C,KAyLmEI,SAAA,EAC/DF,EAAAA,EAAAA,MAACW,EAAAA,GAAI,CAACC,GAAI,EAAGC,GAAI,GAAGX,SAAA,EAClBC,EAAAA,EAAAA,KAACW,EAAAA,GAAU,CAAAZ,SAAC,mBACZC,EAAAA,EAAAA,KAACY,EAAAA,GAAU,CACTC,KAAK,OACLC,GAAG,yBACCjD,EAAS,YAAa,CACxBkD,SAAU,0BAEZC,YAAY,YACZC,UAAW9C,EAAOoC,aAEpBP,EAAAA,EAAAA,KAACkB,EAAAA,GAAa,CAACD,SAAO,EAAAlB,SAAC,8BAEzBC,EAAAA,EAAAA,KAACQ,EAAAA,GAAI,CAACC,GAAI,EAAGC,GAAI,GAAGX,UAClBC,EAAAA,EAAAA,KAACmB,EAAAA,GAAO,CAACN,KAAK,SAASV,UAAU,OAAMJ,SAAC,iBAK5CC,EAAAA,EAAAA,KAACoB,EAAAA,GAAY,CACXC,MAAO,eACP5C,KAAMf,EACN4D,QA3LU,CACd,CACEpC,KAAM,WACNqC,MAAO,YACPC,QAAS,CACPC,QAAQ,EACRC,MAAM,IAIV,CACExC,KAAM,SACNqC,MAAO,SACPC,QAAS,CACPC,QAAQ,EACRC,MAAM,IAIV,CACExC,KAAM,WACNqC,MAAO,YACPC,QAAS,CACPC,QAAQ,EACRC,MAAM,IAGV,CACExC,KAAM,WACNqC,MAAO,WACPC,QAAS,CACPC,QAAQ,EACRC,MAAM,IAGV,CACExC,KAAM,SACNqC,MAAO,SACPC,QAAS,CACPC,QAAQ,EACRC,MAAM,IAGV,CACExC,KAAM,YACNqC,MAAO,YACPC,QAAS,CACPC,QAAQ,EACRC,MAAM,IAGV,CACExC,KAAM,YACNqC,MAAO,YACPC,QAAS,CACPC,QAAQ,EACRC,MAAM,KAoINF,QA1CU,CACd,MA2CG,C","sources":["views/pages/payment/Payment.jsx"],"sourcesContent":["import { Button, Switch, IconButton } from '@mui/material'\nimport MUIDataTable from 'mui-datatables'\nimport React, { useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport * as Icons from '@mui/icons-material'\nimport { ToastContainer, toast } from 'react-toastify'\nimport swal from 'sweetalert'\nimport axios from 'axios' // Import axios for API calls\nimport { checkSession, getAllPayment } from 'src/redux/api/api'\nimport { CButton, CCol, CForm, CFormFeedback, CFormInput, CFormLabel } from '@coreui/react'\nimport { useForm } from 'react-hook-form'\n\nconst Payment = () => {\n  const navigate = useNavigate()\n  const [dataTableData, setDataTable] = useState([])\n\n  const {\n    register,\n    getValues,\n    setValue,\n    handleSubmit,\n    clearErrors,\n    formState: { errors },\n  } = useForm()\n\n  const planList = async () => {\n    try {\n      const res = await getAllPayment()\n      const transformedData = res.data.info.map((plan) => ({\n        ...plan,\n        planname: plan.planid.duration,\n        username: plan.userid.name,\n      }))\n\n      setDataTable(transformedData)\n    } catch (err) {\n      console.log(err)\n      if (err.response && err.response.data && !err.response.data.success) {\n        if (err.response.data.status === 401) {\n          toast.error(err.response.data.message)\n        } else {\n          toast.error(err.response.data.message || 'An unexpected error occurred.')\n        }\n      } else {\n        toast.error('An unexpected error occurred.')\n      }\n    }\n  }\n\n  const onSubmit = async (data) => {\n    try {\n      const res = await checkSession(data.sessionid)\n\n      toast.success(res.data.message)\n    } catch (error) {\n      toast.error(error.response.data.message || 'An unexpected error occurred.')\n    }\n  }\n\n  useEffect(() => {\n    planList()\n  }, [])\n\n  //   const handleStatusChange = async (status, _id) => {\n  //     const data = { id: _id, status: !status }\n  //     try {\n  //       await updatePaymentStatus(data, _id)\n  //       toast.success('Status changed successfully!', { key: _id })\n  //       // Update the status directly in the state\n  //       setDataTable((prevData) =>\n  //         prevData.map((plan) => (plan._id === _id ? { ...plan, status: !status } : plan)),\n  //       )\n  //     } catch {\n  //       toast.error('Something went wrong!', { key: _id })\n  //     }\n  //   }\n\n  const columns = [\n    {\n      name: 'planname',\n      label: 'plan name',\n      options: {\n        filter: true,\n        sort: true,\n      },\n    },\n\n    {\n      name: 'amount',\n      label: 'Amount',\n      options: {\n        filter: true,\n        sort: true,\n      },\n    },\n\n    {\n      name: 'username',\n      label: 'user name',\n      options: {\n        filter: true,\n        sort: true,\n      },\n    },\n    {\n      name: 'currency',\n      label: 'currency',\n      options: {\n        filter: true,\n        sort: true,\n      },\n    },\n    {\n      name: 'status',\n      label: 'status',\n      options: {\n        filter: true,\n        sort: true,\n      },\n    },\n    {\n      name: 'paymentId',\n      label: 'paymentId',\n      options: {\n        filter: true,\n        sort: true,\n      },\n    },\n    {\n      name: 'sessionId',\n      label: 'sessionId',\n      options: {\n        filter: true,\n        sort: true,\n      },\n    },\n\n    // {\n    //   name: 'status',\n    //   label: 'Status',\n    //   options: {\n    //     filter: true,\n    //     sort: false,\n    //     customBodyRender: (_, { rowIndex }) => {\n    //       const { status, _id } = dataTableData[rowIndex]\n    //       return <Switch checked={status} onChange={() => handleStatusChange(status, _id)} />\n    //     },\n    //   },\n    // },\n    // {\n    //   name: '_id',\n    //   label: 'Action',\n    //   options: {\n    //     customBodyRender: (value) => {\n    //       return (\n    //         <div>\n    //           <Icons.EditRounded\n    //             className=\"editButton\"\n    //             onClick={() => {\n    //               const editData = dataTableData.find((data) => data._id === value)\n    //               navigate('/Payment-form', { state: { editData } })\n    //             }}\n    //           />\n    //           <Icons.DeleteRounded\n    //             className=\"deleteButton\"\n    //             onClick={async () => {\n    //               const confirm = await swal({\n    //                 title: 'Are you sure?',\n    //                 text: 'Are you sure you want to delete this plan? All related data will also be deleted.',\n    //                 icon: 'warning',\n    //                 buttons: ['No, cancel it!', 'Yes, I am sure!'],\n    //                 dangerMode: true,\n    //               })\n    //               if (confirm) {\n    //                 try {\n    //                   await deletePayment(value)\n    //                   toast.success('Deleted successfully!', { key: value })\n    //                   planList()\n    //                 } catch {\n    //                   toast.error('Something went wrong!', { key: value })\n    //                 }\n    //               }\n    //             }}\n    //           />\n    //         </div>\n    //       )\n    //     },\n    //   },\n    // },\n  ]\n\n  //   const deleteMultiple = async (selectedRows) => {\n  //     const ids = selectedRows.data.map((row) => dataTableData[row.dataIndex]._id)\n\n  //     const confirm = await swal({\n  //       title: 'Are you sure?',\n  //       text: 'Are you sure that you want to delete the selected plans?',\n  //       icon: 'warning',\n  //       buttons: ['No, cancel it!', 'Yes, I am sure!'],\n  //       dangerMode: true,\n  //     })\n\n  //     if (confirm) {\n  //       try {\n  //         await deleteMultiplePayment(ids)\n  //         toast.success('Deleted successfully!', { key: ids.join(',') })\n  //         planList()\n  //       } catch {\n  //         toast.error('Something went wrong!', { key: ids.join(',') })\n  //       }\n  //     }\n  //   }\n\n  //   const SelectedRowsToolbar = ({ selectedRows }) => {\n  //     return (\n  //       <div>\n  //         <IconButton onClick={() => deleteMultiple(selectedRows)}>\n  //           <Icons.Delete />\n  //         </IconButton>\n  //       </div>\n  //     )\n  //   }\n\n  const options = {\n    // customToolbarSelect: (selectedRows) => <SelectedRowsToolbar selectedRows={selectedRows} />,\n  }\n\n  return (\n    <>\n      <ToastContainer />\n\n      {/* <div className=\"right-text\">\n        <Button\n          variant=\"contained\"\n          size=\"medium\"\n          className=\"AddButton\"\n          onClick={() => navigate('/Payment-form')}\n        >\n          Add Payment\n        </Button>\n      </div> */}\n      <CForm className=\"row g-3 mb-4\" onSubmit={handleSubmit(onSubmit)}>\n        <CCol xl={4} md={12}>\n          <CFormLabel>Chack Payment</CFormLabel>\n          <CFormInput\n            type=\"text\"\n            id=\"validationDefault01\"\n            {...register('sessionid', {\n              required: 'sessionid is required',\n            })}\n            placeholder=\"sessionid\"\n            invalid={!!errors.sessionid}\n          />\n          <CFormFeedback invalid>sessionid is required</CFormFeedback>\n        </CCol>\n        <CCol xl={2} md={12}>\n          <CButton type=\"submit\" className=\"mt-4\">\n            search\n          </CButton>\n        </CCol>\n      </CForm>\n      <MUIDataTable\n        title={'Payment List'}\n        data={dataTableData}\n        columns={columns}\n        options={options}\n      />\n    </>\n  )\n}\n\nexport default Payment\n"],"names":["Payment","useNavigate","dataTableData","setDataTable","useState","register","getValues","setValue","handleSubmit","clearErrors","formState","errors","useForm","useEffect","async","transformedData","getAllPayment","data","info","map","plan","planname","planid","duration","username","userid","name","err","console","log","response","success","status","toast","error","message","planList","_jsxs","_Fragment","children","_jsx","ToastContainer","CForm","className","onSubmit","res","checkSession","sessionid","CCol","xl","md","CFormLabel","CFormInput","type","id","required","placeholder","invalid","CFormFeedback","CButton","MUIDataTable","title","columns","label","options","filter","sort"],"sourceRoot":""}