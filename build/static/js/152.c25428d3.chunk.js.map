{"version":3,"file":"static/js/152.c25428d3.chunk.js","mappings":"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","sources":["assets/images/material-symbols-light--workspace-premium.svg","views/dashboard/Count.js","views/dashboard/UserTable.js","views/dashboard/Dashboard.js","views/pages/diet/Diet.jsx"],"sourcesContent":["var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgMaterialSymbolsLightWorkspacePremium(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"25px\",\n    height: \"25px\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"gray\",\n    d: \"m9.925 13.277l.779-2.58l-2.05-1.505h2.562L12 6.585l.785 2.607h2.561l-2.056 1.504l.78 2.581L12 11.675zM7 21.462v-6.59q-.95-.935-1.475-2.19Q5 11.43 5 10q0-2.927 2.036-4.963T12 3t4.964 2.036T19 10q0 1.429-.525 2.683T17 14.87v6.59l-5-1.5zM12 16q2.5 0 4.25-1.75T18 10t-1.75-4.25T12 4T7.75 5.75T6 10t1.75 4.25T12 16\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgMaterialSymbolsLightWorkspacePremium);\nexport default __webpack_public_path__ + \"static/media/material-symbols-light--workspace-premium.67b7b2e142d15a335b16768f01db5e1b.svg\";\nexport { ForwardRef as ReactComponent };","import { CCol, CRow, CSpinner, CWidgetStatsE } from '@coreui/react'\nimport { useEffect, useState } from 'react'\nimport { toast, ToastContainer } from 'react-toastify'\nimport { getDashboradCount } from 'src/redux/api/api'\nimport 'react-toastify/dist/ReactToastify.css'\nimport CIcon from '@coreui/icons-react'\nimport { cilArrowCircleRight } from '@coreui/icons'\nimport { useNavigate } from 'react-router-dom'\n\nconst Count = () => {\n  const [count, setCount] = useState({})\n  const [isLoading, setIsLoading] = useState(true)\n  const navigate = useNavigate()\n  const getcount = async () => {\n    try {\n      const res = await getDashboradCount()\n      const data = res.data.info\n      setIsLoading(false)\n      setCount(data)\n    } catch (error) {\n      setIsLoading(false)\n      toast.error(error.messsage)\n    }\n  }\n  useEffect(() => {\n    getcount()\n  }, [])\n  return (\n    <>\n      <ToastContainer />\n      {isLoading ? (\n        <CSpinner className=\"theme-spinner-color\" />\n      ) : (\n        <>\n          <CRow>\n            <CCol xl={2} md={6} sm={12} onClick={() => navigate('/Recipe')}>\n              <CWidgetStatsE\n                className=\"mb-3\"\n                title=\"Recipe\"\n                value={count.recipe}\n                className=\"WidgetStatsEback\"\n              />\n            </CCol>\n            <CCol xl={2} md={6} sm={12} onClick={() => navigate('/User')}>\n              <CWidgetStatsE\n                className=\"mb-3\"\n                title=\"User\"\n                value={count.user}\n                className=\"WidgetStatsEback\"\n              />\n            </CCol>\n            <CCol xl={2} md={6} sm={12} onClick={() => navigate('/Category')}>\n              <CWidgetStatsE\n                className=\"mb-3\"\n                title=\"Category\"\n                value={count.category}\n                className=\"WidgetStatsEback\"\n              />\n            </CCol>\n            <CCol xl={2} md={6} sm={12} onClick={() => navigate('/Cuisine')}>\n              <CWidgetStatsE\n                className=\"mb-3\"\n                title=\"Cuisine\"\n                value={count.cuisine}\n                className=\"WidgetStatsEback\"\n              />\n            </CCol>\n            <CCol xl={2} md={6} sm={12} onClick={() => navigate('/Diet')}>\n              <CWidgetStatsE\n                className=\"mb-3\"\n                title=\"Diet\"\n                value={count.diet}\n                className=\"WidgetStatsEback\"\n              />\n            </CCol>\n            <CCol xl={2} md={6} sm={12}>\n              <CWidgetStatsE\n                className=\"mb-3\"\n                title=\"Subscribed User\"\n                value={count.subscribedUser}\n                className=\"WidgetStatsEback\"\n              />\n            </CCol>\n          </CRow>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default Count\n","import MUIDataTable from 'mui-datatables'\nimport { useEffect, useState } from 'react'\nimport { toast, ToastContainer } from 'react-toastify'\nimport { getAllUser } from 'src/redux/api/api'\nimport defaultImg from '../../assets/images/default.png'\n\nconst UserTable = () => {\n  const [dataTableData, setDataTable] = useState([])\n  const [baseUrl, setBaseUrl] = useState('')\n  const getuser = async () => {\n    try {\n      const res = await getAllUser()\n      const data = res.data.info.user\n      setBaseUrl(res.data.info.baseUrl)\n      setDataTable(data)\n    } catch (error) {\n      toast.error(error)\n    }\n  }\n  useEffect(() => {\n    getuser()\n  }, [])\n  const columns = [\n    {\n      name: 'name',\n      label: 'Name',\n      options: {\n        filter: false,\n        sort: true,\n      },\n    },\n    {\n      name: 'email',\n      label: 'Email',\n      options: {\n        filter: false,\n        sort: true,\n      },\n    },\n    {\n      name: 'mono',\n      label: 'MobileNo',\n      options: {\n        filter: false,\n        sort: true,\n      },\n    },\n    {\n      name: 'image',\n      label: 'Image',\n      options: {\n        filter: false,\n        sort: false,\n        customBodyRender: (image) =>\n          image ? (\n            <img\n              src={`${process.env.REACT_APP_USER_PROFILE_PATH}${image}`}\n              alt={image}\n              style={{ height: '50px', width: '50px', borderRadius: '50%' }}\n            />\n          ) : (\n            <img\n              src={defaultImg}\n              alt={image}\n              style={{ height: '50px', width: '50px', borderRadius: '50%' }}\n            />\n          ),\n      },\n    },\n  ]\n\n  const options = {\n    selectableRows: 'none',\n    rowsPerPage: 3,\n    rowsPerPageOptions: [3],\n    download: false,\n    print: false,\n    search: false,\n  }\n  return (\n    <>\n      <ToastContainer />\n      <MUIDataTable title={'User'} data={dataTableData} columns={columns} options={options} />\n    </>\n  )\n}\n\nexport default UserTable\n","import React, { useEffect, useState } from 'react'\nimport { toast, ToastContainer } from 'react-toastify'\nimport TopRecipe from './TopRecipe'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CImage,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n  CSpinner,\n} from '@coreui/react'\nimport Count from './Count'\nimport { getRecentRecipe, getUserCount } from 'src/redux/api/api'\nimport CIcon from '@coreui/icons-react'\nimport { cilCommentSquare, cilDiamond, cilFire, cilStar } from '@coreui/icons'\nimport UserTable from './UserTable'\nimport Diet from '../pages/diet/Diet'\nimport { CChart } from '@coreui/react-chartjs'\nconst Dashboard = () => {\n  const [recipe, setRecipe] = useState([])\n  const [baseUrl, setBaseUrl] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const [userCount, setUserCount] = useState({})\n\n  const getRecentRecipeData = async () => {\n    setIsLoading(true)\n    try {\n      const res = await getRecentRecipe()\n      const data = res.data.info.recipes\n\n      setRecipe(data)\n      setBaseUrl(res.data.info.baseUrl)\n    } catch (error) {\n      toast.error(error.message)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const getusecount = async () => {\n    setIsLoading(true)\n    try {\n      const res = await getUserCount()\n      const data = res.data.info\n\n      setUserCount(data)\n    } catch (error) {\n      toast.error(error.message)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    getRecentRecipeData()\n    getusecount()\n  }, [])\n\n  return (\n    <>\n      {isLoading ? (\n        <CSpinner />\n      ) : (\n        <>\n          <ToastContainer />\n          <CRow className=\"backimg\">\n            {/* <CCol lg={6} md={12}>\n              <TopRecipe />\n            </CCol> */}\n            <CCol lg={12} md={12} className=\"mt-3\">\n              <Count />\n            </CCol>\n\n            {/* Recent Recipe */}\n            {/* <CCol lg={4} md={12} className=\"mt-3\">\n              <CCard>\n                <CCardHeader>Recent Recipe</CCardHeader>\n                <CCardBody style={{ height: '345px', overflow: 'scroll' }}>\n                  {recipe.length === 0 ? (\n                    <p>No recent recipes available</p>\n                  ) : (\n                    recipe.map((data) => (\n                      <CCard className=\"mt-3\" key={data.id}>\n                        <CCardBody>\n                          <CRow>\n                            <CCol lg={5} sm={12}>\n                              <CImage\n                                style={{ height: '100px' }}\n                                src={`${baseUrl}${data.image}`}\n                                alt={data.title}\n                              />\n                            </CCol>\n                            <CCol lg={7} sm={12}>\n                              {data.title}\n                            </CCol>\n                          </CRow>\n                        </CCardBody>\n                      </CCard>\n                    ))\n                  )}\n                </CCardBody>\n              </CCard>\n            </CCol> */}\n            <CCol lg={8} sm={12} className=\"mt-3\">\n              <UserTable />\n            </CCol>\n            <CCol lg={4} sm={12} className=\"mt-3\">\n              <CCard>\n                <CCardHeader>Active InActive User</CCardHeader>\n                <CCardBody>\n                  <CChart\n                    type=\"doughnut\"\n                    data={{\n                      labels: ['Active User', 'Inactive User'],\n                      datasets: [\n                        {\n                          backgroundColor: ['#41B883', '#E46651'],\n                          data: [userCount.activeUser, userCount.deactiveUser],\n                        },\n                      ],\n                    }}\n                  />\n                </CCardBody>\n              </CCard>\n            </CCol>\n          </CRow>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default Dashboard\n","import { Button, Switch, IconButton } from '@mui/material'\r\nimport MUIDataTable from 'mui-datatables'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { deleteDiet, deleteMultipleDiet, getAllDiet, updateDietStatus } from 'src/redux/api/api'\r\nimport * as Icons from '@mui/icons-material'\r\nimport { ToastContainer, toast } from 'react-toastify'\r\nimport swal from 'sweetalert'\r\nimport defaultImg from '../../../../src/assets/images/defaultImg.png'\r\n\r\nconst Diet = () => {\r\n  const navigate = useNavigate()\r\n  const [dataTableData, setDataTable] = useState([])\r\n  const [baseUrl, setBaseUrl] = useState([])\r\n\r\n  const dietList = async () => {\r\n    await getAllDiet()\r\n      .then((res) => {\r\n        const transformedData = res.data.info.diet.map((diet) => ({\r\n          ...diet,\r\n          // languagesName: diet.languages == null ? '' : diet.languages.languagesName,\r\n        }))\r\n\r\n        setDataTable(transformedData)\r\n        setBaseUrl(`${process.env.REACT_APP_DIET_IMAGE_PATH}`)\r\n      })\r\n      .catch((err) => {\r\n        if (!err.response.data.success) {\r\n          if (err.response.data.status === 401) {\r\n            toast.error(err.response.data.message)\r\n          } else {\r\n            toast.error(err.response.data, 'else')\r\n          }\r\n        }\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    dietList()\r\n  }, [])\r\n\r\n  const columns = [\r\n    {\r\n      name: 'name',\r\n      label: 'Name',\r\n      options: {\r\n        filter: true,\r\n        sort: true,\r\n      },\r\n    },\r\n\r\n    {\r\n      name: 'image',\r\n      label: 'Image',\r\n      options: {\r\n        customBodyRender: (image) =>\r\n          image ? (\r\n            <img\r\n              src={`${process.env.REACT_APP_DIET_IMAGE_PATH}${image}`}\r\n              alt={image}\r\n              style={{ height: '50px', width: '50px' }}\r\n            />\r\n          ) : (\r\n            <img src={defaultImg} alt={image} style={{ height: '50px', width: '50px' }} />\r\n          ),\r\n      },\r\n    },\r\n    {\r\n      name: 'status',\r\n      label: 'Status',\r\n      options: {\r\n        filter: true,\r\n        sort: false,\r\n        customBodyRender: (_, { rowIndex }) => {\r\n          const { status, _id } = dataTableData[rowIndex]\r\n          return (\r\n            <Switch\r\n              checked={status}\r\n              onChange={() => {\r\n                const data = { id: _id, status: !status }\r\n                updateDietStatus(data, _id)\r\n                  .then(() => {\r\n                    toast.success('Status changed successfully!', {\r\n                      key: data._id,\r\n                    })\r\n                    dietList()\r\n                  })\r\n                  .catch(() => {\r\n                    toast.error('Something went wrong!', {\r\n                      key: data._id,\r\n                    })\r\n                  })\r\n              }}\r\n            />\r\n          )\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: '_id',\r\n      label: 'Action',\r\n      options: {\r\n        customBodyRender: (value) => {\r\n          return (\r\n            <div>\r\n              <Icons.EditRounded\r\n                className=\"editButton\"\r\n                onClick={() => {\r\n                  console.log(dataTableData)\r\n                  const editData = dataTableData.find((data) => data._id === value)\r\n                  navigate('/Diet-form', { state: { editData: editData, imageUrl: baseUrl } })\r\n                }}\r\n              ></Icons.EditRounded>\r\n              <Icons.DeleteRounded\r\n                className=\"deleteButton\"\r\n                onClick={async () => {\r\n                  const confirm = await swal({\r\n                    title: 'Are you sure?',\r\n                    text: 'Are you sure? Want to delete Diet? All related data will also be deleted',\r\n                    icon: 'warning',\r\n                    buttons: ['No, cancel it!', 'Yes, I am sure!'],\r\n                    dangerMode: true,\r\n                  })\r\n                  if (confirm) {\r\n                    deleteDiet(value)\r\n                      .then(() => {\r\n                        toast.success('Deleted successfully!', {\r\n                          key: value,\r\n                        })\r\n\r\n                        dietList()\r\n                      })\r\n                      .catch(() => {\r\n                        toast.error('Something went wrong!', {\r\n                          key: value,\r\n                        })\r\n                      })\r\n                  }\r\n                }}\r\n              ></Icons.DeleteRounded>\r\n            </div>\r\n          )\r\n        },\r\n      },\r\n    },\r\n  ]\r\n\r\n  const deleteMultiple = async (selectedRows) => {\r\n    const ids = selectedRows.data.map((row) => dataTableData[row.dataIndex]._id)\r\n    const confirm = await swal({\r\n      title: 'Are you sure?',\r\n      text: 'Are you sure that you want to delete selected diet?',\r\n      icon: 'warning',\r\n      buttons: ['No, cancel it!', 'Yes, I am sure!'],\r\n      dangerMode: true,\r\n    })\r\n\r\n    if (confirm) {\r\n      // console.log(ids)\r\n      deleteMultipleDiet(ids)\r\n        .then(() => {\r\n          dietList()\r\n          toast.success('Deleted successfully!', {\r\n            key: ids.join(','),\r\n          })\r\n        })\r\n        .catch(() => {\r\n          toast.error('Something went wrong!', {\r\n            key: ids.join(','),\r\n          })\r\n        })\r\n    }\r\n  }\r\n\r\n  const SelectedRowsToolbar = ({ selectedRows }) => {\r\n    return (\r\n      <div>\r\n        <IconButton onClick={() => deleteMultiple(selectedRows)}>\r\n          <Icons.Delete />\r\n        </IconButton>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const options = {\r\n    customToolbarSelect: (selectedRows) => <SelectedRowsToolbar selectedRows={selectedRows} />,\r\n  }\r\n  return (\r\n    <>\r\n      <ToastContainer />\r\n      <div className=\"right-text\">\r\n        <Button\r\n          variant=\"contained\"\r\n          size=\"medium\"\r\n          className=\"AddButton\"\r\n          onClick={() => navigate('/Diet-form')}\r\n        >\r\n          Add Diet\r\n        </Button>\r\n      </div>\r\n      <MUIDataTable title={'Diet List'} data={dataTableData} columns={columns} options={options} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Diet\r\n"],"names":["Count","count","setCount","useState","isLoading","setIsLoading","navigate","useNavigate","useEffect","async","data","getDashboradCount","info","error","toast","messsage","getcount","_jsxs","_Fragment","children","_jsx","ToastContainer","CSpinner","className","CRow","CCol","xl","md","sm","onClick","CWidgetStatsE","title","value","recipe","user","category","cuisine","diet","subscribedUser","UserTable","dataTableData","setDataTable","baseUrl","setBaseUrl","res","getAllUser","getuser","columns","name","label","options","filter","sort","customBodyRender","image","src","concat","process","alt","style","height","width","borderRadius","defaultImg","MUIDataTable","selectableRows","rowsPerPage","rowsPerPageOptions","download","print","search","Dashboard","setRecipe","userCount","setUserCount","getRecentRecipe","recipes","message","getRecentRecipeData","getUserCount","getusecount","lg","CCard","CCardHeader","CCardBody","CChart","type","labels","datasets","backgroundColor","activeUser","deactiveUser","Diet","dietList","getAllDiet","then","transformedData","map","catch","err","response","success","status","_","_ref","rowIndex","_id","Switch","checked","onChange","id","updateDietStatus","key","Icons","console","log","editData","find","state","imageUrl","swal","text","icon","buttons","dangerMode","deleteDiet","SelectedRowsToolbar","_ref2","selectedRows","IconButton","ids","row","dataIndex","deleteMultipleDiet","join","deleteMultiple","customToolbarSelect","Button","variant","size"],"sourceRoot":""}