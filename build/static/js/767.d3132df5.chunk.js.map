{"version":3,"file":"static/js/767.d3132df5.chunk.js","mappings":"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","sources":["views/pages/recipe/IngredientAdd.jsx","../node_modules/@coreui/icons/src/free/cil-plus.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CRow,\n  CSpinner,\n  CFormText,\n  CFormSelect,\n} from '@coreui/react'\nimport { useForm, useFieldArray } from 'react-hook-form'\nimport CIcon from '@coreui/icons-react'\nimport { cilPlus } from '@coreui/icons'\nimport { addIngredient, getAllUnit } from 'src/redux/api/api'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { useLocation, useNavigate } from 'react-router-dom'\n\nconst IngredientAdd = () => {\n  const [units, setUnits] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const { state } = useLocation()\n  const navigate = useNavigate()\n\n  const {\n    register,\n    control,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n  } = useForm({\n    defaultValues: {\n      elements: [{ name: '', amount: '', unitId: '', idValue: '' }],\n    },\n  })\n\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'elements',\n  })\n\n  const fetchUnits = async () => {\n    try {\n      const response = await getAllUnit()\n      setUnits(response.data.info)\n    } catch (error) {\n      if (!error.response.data.success) {\n        toast.error(error.response.data.message)\n      }\n      setIsLoading(false)\n    }\n  }\n\n  const handleAddElement = () => {\n    append({ name: '', amount: '', unitId: '', idValue: state.editData })\n  }\n\n  const handleRemoveElement = (index) => {\n    remove(index)\n  }\n\n  const onSubmit = async (data) => {\n    setIsLoading(true)\n    try {\n      const transformedData = data.elements.map((item) => ({\n        name: item.name,\n        amount: item.amount,\n        unit: item.unitId || null, // Convert empty unitId to null\n        recipeid: state.editData,\n      }))\n\n      const response = await addIngredient(transformedData)\n\n      toast.success('Data submitted successfully!')\n      navigate('/Ingredient', { state: { id: state.editData } })\n    } catch (error) {\n      console.error('Error submitting form data:', error)\n      toast.error('Error submitting form data.')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchUnits()\n  }, [])\n\n  return (\n    <>\n      <CContainer className=\"mt-3\">\n        <CRow>\n          <CCol md={12}>\n            <CCard>\n              <CCardHeader>\n                <strong>Ingredient Form</strong>\n              </CCardHeader>\n              <CCardBody className=\"mt-3\">\n                <ToastContainer />\n                <CForm className=\"row g-3\" onSubmit={handleSubmit(onSubmit)}>\n                  {fields.map((field, index) => (\n                    <CRow key={field.id} className=\"mb-3 align-items-end\">\n                      <CCol xl={3} md={12}>\n                        <CFormLabel>Name</CFormLabel>\n                        <CFormInput\n                          type=\"text\"\n                          {...register(`elements.${index}.name`, {\n                            required: 'Text Value is required',\n                          })}\n                          invalid={!!errors.elements?.[index]?.name}\n                          placeholder=\"Text Value\"\n                        />\n                        {errors.elements?.[index]?.name && (\n                          <CFormText className=\"text-danger\">\n                            {errors.elements[index].name.message}\n                          </CFormText>\n                        )}\n                      </CCol>\n                      <CCol xl={3} md={12}>\n                        <CFormLabel>Amount</CFormLabel>\n                        <CFormInput\n                          type=\"text\"\n                          {...register(`elements.${index}.amount`, {\n                            required: 'Number Value is required',\n                          })}\n                          invalid={!!errors.elements?.[index]?.amount}\n                          placeholder=\"Number Value\"\n                        />\n                        {errors.elements?.[index]?.amount && (\n                          <CFormText className=\"text-danger\">\n                            {errors.elements[index].amount.message}\n                          </CFormText>\n                        )}\n                      </CCol>\n                      <CCol xl={3} md={12}>\n                        <CFormLabel>Unit</CFormLabel>\n                        <CFormSelect {...register(`elements.${index}.unitId`)}>\n                          <option value=\"\">Select Unit</option>\n                          {units.map((unit) => (\n                            <option key={unit._id} value={unit._id}>\n                              {unit.name}\n                            </option>\n                          ))}\n                        </CFormSelect>\n                      </CCol>\n\n                      <CCol xl={2} md={12} className=\"mt-2\">\n                        <CButton\n                          onClick={() => handleRemoveElement(index)}\n                          color=\"danger\"\n                          className=\"me-2\"\n                        >\n                          Remove\n                        </CButton>\n                      </CCol>\n                      {index === fields.length - 1 && (\n                        <CCol xl={1} md={12}>\n                          <CButton onClick={handleAddElement} color=\"primary\" className=\"me-2\">\n                            <CIcon icon={cilPlus} />\n                          </CButton>\n                        </CCol>\n                      )}\n                    </CRow>\n                  ))}\n                  <CRow className=\"mt-3\">\n                    <CCol md={12} className=\"text-center\">\n                      {isLoading ? (\n                        <CButton disabled>\n                          <CSpinner component=\"span\" size=\"sm\" aria-hidden=\"true\" />\n                          Loading...\n                        </CButton>\n                      ) : (\n                        <CButton type=\"submit\" className=\"AddButton\">\n                          Add\n                        </CButton>\n                      )}\n                    </CCol>\n                  </CRow>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </>\n  )\n}\n\nexport default IngredientAdd\n","export var cilPlus = [\"512 512\", \"<polygon fill='var(--ci-primary-color, currentColor)' points='440 240 272 240 272 72 240 72 240 240 72 240 72 272 240 272 240 440 272 440 272 272 440 272 440 240' class='ci-primary'/>\"];\n"],"names":["IngredientAdd","units","setUnits","useState","isLoading","setIsLoading","state","useLocation","navigate","useNavigate","register","control","handleSubmit","formState","errors","setValue","useForm","defaultValues","elements","name","amount","unitId","idValue","fields","append","remove","useFieldArray","handleAddElement","editData","useEffect","async","response","getAllUnit","data","info","error","success","toast","message","fetchUnits","_jsx","_Fragment","children","CContainer","className","CRow","CCol","md","_jsxs","CCard","CCardHeader","CCardBody","ToastContainer","CForm","onSubmit","transformedData","map","item","unit","recipeid","addIngredient","id","console","field","index","_errors$elements","_errors$elements$inde","_errors$elements2","_errors$elements2$ind","_errors$elements3","_errors$elements3$ind","_errors$elements4","_errors$elements4$ind","xl","CFormLabel","CFormInput","type","concat","required","invalid","placeholder","CFormText","CFormSelect","value","_id","CButton","onClick","handleRemoveElement","color","length","CIcon","icon","cilPlus","disabled","CSpinner","component","size"],"sourceRoot":""}