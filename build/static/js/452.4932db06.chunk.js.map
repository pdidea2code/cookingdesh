{"version":3,"file":"static/js/452.4932db06.chunk.js","mappings":"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","sources":["views/pages/recipe/RecipeForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CFormFeedback,\r\n  CFormInput,\r\n  CFormLabel,\r\n  CRow,\r\n  CSpinner,\r\n  CFormSelect,\r\n  CFormTextarea,\r\n} from '@coreui/react';\r\nimport { useForm } from 'react-hook-form';\r\nimport {\r\n  addRecipe,\r\n  getAllCategory,\r\n  getAllMeal,\r\n  getAllAllergie,\r\n  getAllDiet,\r\n  getAllCuisine,\r\n  updateRecipe,\r\n} from 'src/redux/api/api';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst RecipeForm = () => {\r\n  const {\r\n    register,\r\n    setValue,\r\n    getValues,\r\n    handleSubmit,\r\n    clearErrors,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  const navigate = useNavigate();\r\n  const [isUpdate, setIsUpdate] = useState('');\r\n  const [newUrl, setNewUrl] = useState('');\r\n  const [audioFile, setAudioFile] = useState('');\r\n  const [videoDiv, setVideoDiv] = useState(0);\r\n  const [videoFile, setVideoFile] = useState(null);\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [mealOptions, setMealOptions] = useState([]);\r\n  const [allergieOptions, setAllergieOptions] = useState([]);\r\n  const [dietOptions, setDietOptions] = useState([]);\r\n  const [cuisineOptions, setCuisineOptions] = useState([]);\r\n  const [categoryOptions, setCategoryOptions] = useState([]);\r\n  const { state } = useLocation();\r\n\r\n  const handleChange = (fieldName, fieldValue) => {\r\n    clearErrors(fieldName);\r\n    setValue(fieldName, fieldValue);\r\n    if (fieldName === 'contentType') {\r\n      setVideoDiv(fieldValue);\r\n    }\r\n    console.log(fieldValue, fieldName);\r\n  };\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const [meals, allergies, cuisines, diets, categories] = await Promise.all([\r\n        getAllMeal(),\r\n        getAllAllergie(),\r\n        getAllCuisine(),\r\n        getAllDiet(),\r\n        getAllCategory(),\r\n      ]);\r\n      setMealOptions(meals.data.info);\r\n      setAllergieOptions(allergies.data.info);\r\n      setCuisineOptions(cuisines.data.info);\r\n      setDietOptions(diets.data.info.diet);\r\n      setCategoryOptions(categories.data.info.category);\r\n    } catch (err) {\r\n      toast.error('Failed to fetch data');\r\n    }\r\n  };\r\n\r\n  const handleFileUpload = (e) => {\r\n    const files = e.target.files[0];\r\n    if (files) {\r\n      const imageUrl = URL.createObjectURL(files);\r\n      console.log(imageUrl);\r\n      setNewUrl(imageUrl);\r\n    } else {\r\n      setNewUrl('');\r\n    }\r\n  };\r\n\r\n  const handleAudioFileUpload = (e) => {\r\n    const audioFiles = e.target.files[0];\r\n    if (audioFiles) {\r\n      const audioUrl = URL.createObjectURL(audioFiles);\r\n      setAudioFile(audioUrl);\r\n    } else {\r\n      setAudioFile('');\r\n    }\r\n  };\r\n\r\n  const handleVideoChange = (e) => {\r\n    const file = e.target.files[0];\r\n    // Check if the selected file is an mp4 video\r\n    if (file && file.type === 'video/mp4') {\r\n      const vedioUrl = URL.createObjectURL(file);\r\n      setVideoFile(vedioUrl);\r\n    } else {\r\n      e.target.value = null;\r\n      toast.error('Invalid video type. Only mp4 files are allowed.');\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n    const formData = new FormData(); // formdata object\r\n    Object.keys(data).forEach(function (key) {\r\n      if (key === 'image' || key === 'video' || key === 'audio') {\r\n        if (data[key][0] !== undefined) {\r\n          formData.append(key, data[key][0]);\r\n        }\r\n      } else {\r\n        formData.append(key, data[key]);\r\n      }\r\n    });\r\n\r\n    try {\r\n      if (isUpdate === '') {\r\n        console.log(formData)\r\n        await addRecipe(formData);\r\n        toast.success('Recipe added successfully');\r\n      } else {\r\n        await updateRecipe(formData, isUpdate);\r\n        toast.success('Recipe updated successfully');\r\n      }\r\n      navigate('/recipe');\r\n    } catch (err) {\r\n      toast.error('Error processing request');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (state) {\r\n      const { editData, imageUrl } = state;\r\n      console.log(editData)\r\n      setIsUpdate(editData._id);\r\n      setValue('title', editData.title);\r\n      setValue('time', editData.time);\r\n      setValue('description', editData.description);\r\n      setValue('meal', editData.meal);\r\n      setValue('diet', editData.diet);\r\n      setValue('cuisine', editData.cuisine);\r\n      setValue('allergie', editData.allergie);\r\n      setValue('category', editData.category);\r\n\r\n      setNewUrl(imageUrl + editData.image);\r\n      // setVideoDiv(0);\r\n      if(editData.videotype == \"0\"){\r\n        setValue(\"videourl\" , editData.videourl);\r\n        setVideoDiv(0);\r\n      }else{\r\n        setVideoDiv(1);\r\n        setVideoFile(imageUrl + editData.video);\r\n      }\r\n      setAudioFile(imageUrl + editData.audio);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"bg-light min-vh-100\">\r\n      <CContainer className=\"mt-3\">\r\n        <CRow>\r\n          <CCol md={8}>\r\n            <CCard>\r\n              <CCardHeader>\r\n                <strong>Recipe Form</strong>\r\n              </CCardHeader>\r\n              <CCardBody>\r\n                <ToastContainer />\r\n                <CForm className=\"row g-3 \" onSubmit={handleSubmit(onSubmit)}>\r\n                  {/* recipe field */}\r\n                  <CCol xl={6} md={12}>\r\n                    <CFormLabel>Recipe Title</CFormLabel>\r\n                    <CFormInput\r\n                      type=\"text\"\r\n                      id=\"validationDefault01\"\r\n                      {...register('title', {\r\n                        required: 'Title is required',\r\n                      })}\r\n                      placeholder=\"Title\"\r\n                      invalid={!!errors.title}\r\n                    />\r\n                    <CFormFeedback invalid>{errors.title?.message}</CFormFeedback>\r\n                  </CCol>\r\n                  {/* end name field */}\r\n                  {/* recipe time field */}\r\n                  <CCol xl={6} md={12}>\r\n                    <CFormLabel>Recipe Time</CFormLabel>\r\n                    <CFormInput\r\n                      type=\"text\"\r\n                      id=\"validationDefault01\"\r\n                      {...register('time', {\r\n                        required: 'Recipe time is required',\r\n                      })}\r\n                      placeholder=\"Time\"\r\n                      invalid={!!errors.time}\r\n                    />\r\n                    <CFormFeedback invalid>{errors.time?.message}</CFormFeedback>\r\n                  </CCol>\r\n                  {/* end name field */}\r\n\r\n                  {/* Meal field */}\r\n                  <CCol xl={6} md={12}>\r\n                    <CFormLabel>Meal</CFormLabel>\r\n                    <CFormSelect\r\n                      id=\"meal\"\r\n                      name=\"meal\"\r\n                      {...register('meal', { required: 'Meal is required' })}\r\n                      invalid={!!errors.meal}\r\n                      value={getValues('meal')}\r\n                      onChange={(e) => handleChange('meal', e.target.value)}\r\n                    >\r\n                      <option value=\"\">Select Meal</option>\r\n                      {mealOptions?.map((option) => (\r\n                        <option key={option._id} value={option._id}>\r\n                          {option.name}\r\n                        </option>\r\n                      ))}\r\n                    </CFormSelect>\r\n                    <CFormFeedback invalid>{errors.meal?.message}</CFormFeedback>\r\n                  </CCol>\r\n                  {/* end meal field */}\r\n                  {/* Diet field */}\r\n                  <CCol xl={6} md={12}>\r\n                    <CFormLabel>Diet</CFormLabel>\r\n                    <CFormSelect\r\n                      id=\"diet\"\r\n                      name=\"diet\"\r\n                      {...register('diet', { required: 'Diet is required' })}\r\n                      invalid={!!errors.diet}\r\n                      value={getValues('diet')}\r\n                      onChange={(e) => handleChange('diet', e.target.value)}\r\n                    >\r\n                      <option value=\"\">Select Diet</option>\r\n                      {dietOptions?.map((option) => (\r\n                        <option key={option._id} value={option._id}>\r\n                          {option.name}\r\n                        </option>\r\n                      ))}\r\n                    </CFormSelect>\r\n                    <CFormFeedback invalid>{errors.diet?.message}</CFormFeedback>\r\n                  </CCol>\r\n                  {/* end diet field */}\r\n                  {/* Cuisine field */}\r\n                  <CCol xl={6} md={12}>\r\n                    <CFormLabel>Cuisine</CFormLabel>\r\n                    <CFormSelect\r\n                      id=\"cuisine\"\r\n                      name=\"cuisine\"\r\n                      {...register('cuisine', { required: 'Cuisine is required' })}\r\n                      invalid={!!errors.cuisine}\r\n                      value={getValues('cuisine')}\r\n                      onChange={(e) => handleChange('cuisine', e.target.value)}\r\n                    >\r\n                      <option value=\"\">Select Cuisine</option>\r\n                      {cuisineOptions?.map((option) => (\r\n                        <option key={option._id} value={option._id}>\r\n                          {option.name}\r\n                        </option>\r\n                      ))}\r\n                    </CFormSelect>\r\n                    <CFormFeedback invalid>{errors.cuisine?.message}</CFormFeedback>\r\n                  </CCol>\r\n                  {/* end cuisine field */}\r\n                  {/* Allergie field */}\r\n                  <CCol xl={6} md={12}>\r\n                    <CFormLabel>Allergie</CFormLabel>\r\n                    <CFormSelect\r\n                      id=\"allergie\"\r\n                      name=\"allergie\"\r\n                      {...register('allergie', { required: 'Allergie is required' })}\r\n                      invalid={!!errors.allergie}\r\n                      value={getValues('allergie')}\r\n                      onChange={(e) => handleChange('allergie', e.target.value)}\r\n                    >\r\n                      <option value=\"\">Select Allergie</option>\r\n                      {allergieOptions?.map((option) => (\r\n                        <option key={option._id} value={option._id}>\r\n                          {option.name}\r\n                        </option>\r\n                      ))}\r\n                    </CFormSelect>\r\n                    <CFormFeedback invalid>{errors.allergie?.message}</CFormFeedback>\r\n                  </CCol>\r\n                  {/* end allergie field */}\r\n                  {/* Category field */}\r\n                  <CCol xl={6} md={12}>\r\n                    <CFormLabel>Category</CFormLabel>\r\n                    <CFormSelect\r\n                      id=\"category\"\r\n                      name=\"category\"\r\n                      {...register('category', { required: 'Category is required' })}\r\n                      invalid={!!errors.category}\r\n                      value={getValues('category')}\r\n                      onChange={(e) => handleChange('category', e.target.value)}\r\n                    >\r\n                      <option value=\"\">Select Category</option>\r\n                      {categoryOptions?.map((option) => (\r\n                        <option key={option._id} value={option._id}>\r\n                          {option.name}\r\n                        </option>\r\n                      ))}\r\n                    </CFormSelect>\r\n                    <CFormFeedback invalid>{errors.category?.message}</CFormFeedback>\r\n                  </CCol>\r\n                  {/* end category field */}\r\n                  {/* description field */}\r\n                  <CCol md={12}>\r\n                    <CFormLabel>Description</CFormLabel>\r\n                    <CFormTextarea\r\n                      type=\"text\"\r\n                      id=\"validationDefault01\"\r\n                      {...register('description', {\r\n                        required: 'Description is required',\r\n                      })}\r\n                      placeholder=\"Description\"\r\n                      invalid={!!errors.description}\r\n                    />\r\n                    <CFormFeedback invalid>\r\n                      {errors.description?.message}\r\n                    </CFormFeedback>\r\n                  </CCol>\r\n                  {/* end description field */}\r\n                  {/* recipe image field */}\r\n                  <CCol xl={6} md={12}>\r\n                    <CFormLabel>Recipe Image</CFormLabel>\r\n                    <CFormInput\r\n                      type=\"file\"\r\n                      name=\"image\"\r\n                      accept=\"image/*\"\r\n                      id=\"validationDefault01\"\r\n                      {...register('image', {\r\n                        required: isUpdate ? false : 'Image is required',\r\n                      })}\r\n                      placeholder=\"Recipe Image\"\r\n                      onChange={handleFileUpload}\r\n                      invalid={!!errors.image}\r\n                    />\r\n                    {newUrl && (\r\n                      <img\r\n                        src={newUrl}\r\n                        className=\"img-fluid img-thumbnail\"\r\n                        alt=\"Selected\"\r\n                        style={{ maxHeight: '200px', marginTop: '10px' }}\r\n                      />\r\n                    )}\r\n                    <CFormFeedback invalid>{errors.image?.message}</CFormFeedback>\r\n                  </CCol>\r\n                  {/* end recipe image field */}\r\n                  {/* audio upload field */}\r\n                  <CCol xl={6} md={12}>\r\n                    <CFormLabel>Recipe Audio</CFormLabel>\r\n                    <CFormInput\r\n                      type=\"file\"\r\n                      name=\"audio\"\r\n                      accept=\"audio/*\"\r\n                      id=\"validationDefault01\"\r\n                      {...register('audio')}\r\n                      placeholder=\"Recipe Audio\"\r\n                      onChange={handleAudioFileUpload}\r\n                    />\r\n                    {audioFile && (\r\n                      <audio\r\n                        src={audioFile}\r\n                        controls\r\n                        className=\"audio-player\"\r\n                        style={{ marginTop: '10px' }}\r\n                      />\r\n                    )}\r\n                    <CFormFeedback invalid>{errors.audio?.message}</CFormFeedback>\r\n                  </CCol>\r\n                  {/* end audio upload field */}\r\n                  {/* content type radio buttons */}\r\n                  <CCol xl={6} md={12}>\r\n                    <div>\r\n                      <CFormLabel>Content Type</CFormLabel>\r\n                    </div>\r\n                    <div className=\"d-flex align-items-center\">\r\n                      <div className=\"form-check mr-3\">\r\n                        <input\r\n                          type=\"radio\"\r\n                          name=\"contentType\"\r\n                          id=\"contentTypeVideo\"\r\n                          className=\"form-check-input\"\r\n                          value=\"0\"\r\n                          checked={videoDiv == 1}\r\n                          onChange={() => setVideoDiv(1)}\r\n                        />\r\n                        <label htmlFor=\"contentTypeVideo\" className=\"form-check-label\">\r\n                          Video\r\n                        </label>\r\n                      </div>\r\n                      <div className=\"form-check\">\r\n                        <input\r\n                          type=\"radio\"\r\n                          name=\"contentType\"\r\n                          id=\"contentTypeLink\"\r\n                          className=\"form-check-input\"\r\n                          value=\"1\"\r\n                          checked={videoDiv == 0}\r\n                          onChange={() => setVideoDiv(0)}\r\n                        />\r\n                        <label htmlFor=\"contentTypeLink\" className=\"form-check-label\">\r\n                          Link\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                  </CCol>\r\n                  {/* end content type radio buttons */}\r\n\r\n                  {/* Video field */}\r\n                  {videoDiv === 1 ? (\r\n                    <CCol xl={12} md={12}>\r\n                      <CFormLabel>Video</CFormLabel>\r\n                      <CFormInput\r\n                        type=\"file\"\r\n                        name=\"video\"\r\n                        accept=\"video/mp4\"\r\n                        id=\"videoUpload\"\r\n                        {...register('video')}\r\n                        placeholder=\"Video\"\r\n                        onChange={handleVideoChange}\r\n                        invalid={!!errors.video}\r\n                      />\r\n                      {videoFile && (\r\n                        <video\r\n                          src={videoFile}\r\n                          className=\"video-preview\"\r\n                          controls\r\n                          style={{ marginTop: '10px', maxWidth: '100%' }}\r\n                        />\r\n                      )}\r\n                      <CFormFeedback invalid>{errors.video?.message}</CFormFeedback>\r\n                    </CCol>\r\n                  ) : (\r\n                    <CCol xl={12} md={12}>\r\n                      <CFormLabel>Video Link</CFormLabel>\r\n                      <CFormInput\r\n                        type=\"text\"\r\n                        id=\"videourl\"\r\n                        {...register('videourl', {\r\n                          required: 'Title is required',\r\n                        })}\r\n                        placeholder=\"Enter video link\"\r\n                        invalid={!!errors.videoUrl}\r\n                      />\r\n                      <CFormFeedback invalid>\r\n                        {errors.videoUrl?.message}\r\n                      </CFormFeedback>\r\n                    </CCol>\r\n                  )}\r\n                  {/* end Video field */}\r\n\r\n                  <CCol xs={12} className=\"text-center\">\r\n                    <CButton color=\"primary\" type=\"submit\" disabled={isLoading}>\r\n                      {isLoading ? (\r\n                        <>\r\n                          <CSpinner size=\"sm\" /> Please Wait\r\n                        </>\r\n                      ) : (\r\n                        isUpdate\r\n                          ? 'Update Recipe'\r\n                          : 'Add Recipe'\r\n                      )}\r\n                    </CButton>\r\n                  </CCol>\r\n                </CForm>\r\n              </CCardBody>\r\n            </CCard>\r\n          </CCol>\r\n        </CRow>\r\n      </CContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecipeForm;\r\n"],"names":["RecipeForm","_errors$title","_errors$time","_errors$meal","_errors$diet","_errors$cuisine","_errors$allergie","_errors$category","_errors$description","_errors$image","_errors$audio","_errors$video","_errors$videoUrl","register","setValue","getValues","handleSubmit","clearErrors","formState","errors","useForm","navigate","useNavigate","isUpdate","setIsUpdate","useState","newUrl","setNewUrl","audioFile","setAudioFile","videoDiv","setVideoDiv","videoFile","setVideoFile","isLoading","setIsLoading","mealOptions","setMealOptions","allergieOptions","setAllergieOptions","dietOptions","setDietOptions","cuisineOptions","setCuisineOptions","categoryOptions","setCategoryOptions","state","useLocation","handleChange","fieldName","fieldValue","console","log","useEffect","editData","imageUrl","_id","title","time","description","meal","diet","cuisine","allergie","category","image","videotype","videourl","video","audio","async","meals","allergies","cuisines","diets","categories","Promise","all","getAllMeal","getAllAllergie","getAllCuisine","getAllDiet","getAllCategory","data","info","err","toast","error","fetchData","_jsx","className","children","CContainer","CRow","CCol","md","_jsxs","CCard","CCardHeader","CCardBody","ToastContainer","CForm","onSubmit","formData","FormData","Object","keys","forEach","key","undefined","append","addRecipe","success","updateRecipe","xl","CFormLabel","CFormInput","type","id","required","placeholder","invalid","CFormFeedback","message","CFormSelect","name","value","onChange","e","target","map","option","CFormTextarea","accept","files","URL","createObjectURL","src","alt","style","maxHeight","marginTop","audioFiles","audioUrl","controls","checked","htmlFor","file","vedioUrl","maxWidth","videoUrl","xs","CButton","color","disabled","_Fragment","CSpinner","size"],"sourceRoot":""}