{"version":3,"file":"static/js/733.7066473b.chunk.js","mappings":"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","sources":["views/pages/recipe/step/StepForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CForm,\n  CFormFeedback,\n  CFormInput,\n  CFormLabel,\n  CRow,\n  CSpinner,\n  CFormTextarea,\n} from '@coreui/react'\nimport { useForm } from 'react-hook-form'\nimport { addStep, updateStep } from 'src/redux/api/api'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\nconst StepForm = () => {\n  const {\n    register,\n    setValue,\n    handleSubmit,\n    clearErrors,\n    formState: { errors },\n  } = useForm()\n\n  const navigate = useNavigate()\n  const [newUrl, setNewUrl] = useState('')\n  const [isUpdate, setIsUpdate] = useState('')\n  const [recipeId, setRecipeId] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const { state } = useLocation()\n\n  const handleChange = async (fieldName, fieldValue) => {\n    clearErrors(fieldName)\n    setValue(fieldName, fieldValue)\n  }\n\n  const handleFileUpload = (e) => {\n    const files = e.target.files[0]\n    if (files) {\n      const imageUrl = URL.createObjectURL(files)\n      setNewUrl(imageUrl)\n    } else {\n      setNewUrl('')\n    }\n  }\n\n  const onSubmit = (data) => {\n    let formData = new FormData()\n    Object.keys(data).forEach((key) => {\n      if (key === 'image') {\n        if (data[key][0] !== undefined) {\n          formData.append(key, data[key][0])\n        }\n      } else {\n        formData.append(key, data[key])\n      }\n    })\n    if (state && state.id) {\n      formData.append('recipeid', state.id)\n    }\n\n    if (isUpdate) {\n      updateStep(formData, isUpdate)\n        .then(() => {\n          navigate('/Step', { state: { id: recipeId } })\n        })\n        .catch((err) => {\n          if (!err.response.data.success) {\n            toast.error(err.response.data.message)\n          } else {\n            setIsLoading(false)\n          }\n        })\n    } else {\n      addStep(formData)\n        .then(() => {\n          navigate('/Step', { state: { id: recipeId } })\n        })\n        .catch((err) => {\n          if (!err.response.data.success) {\n            toast.error(err.response.data.message)\n          } else {\n            setIsLoading(false)\n          }\n        })\n    }\n  }\n\n  useEffect(() => {\n    if (state && state.id) {\n      console.log(state.id)\n      setRecipeId(state.id)\n    }\n    if (state && state.editData) {\n      const { editData, imageUrl } = state\n      console.log(editData)\n      setIsUpdate(editData._id)\n      setValue('name', editData.name)\n      setValue('stepno', editData.stepno)\n      setValue('description', editData.description)\n      setValue('recipeid', editData.recipeid)\n      setRecipeId(editData.recipeid)\n\n      setNewUrl(imageUrl + editData.image)\n    }\n  }, [state, setValue])\n\n  return (\n    <div className=\"bg-light min-vh-100\">\n      <CContainer className=\"mt-3\">\n        <CRow>\n          <CCol md={8}>\n            <CCard>\n              <CCardHeader>\n                <strong>{isUpdate ? 'Edit Step' : 'Add Step'}</strong>\n              </CCardHeader>\n              <CCardBody>\n                <ToastContainer />\n                <CForm className=\"row g-3\" onSubmit={handleSubmit(onSubmit)}>\n                  {/* Step Name field */}\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Step Name</CFormLabel>\n                    <CFormInput\n                      type=\"text\"\n                      id=\"name\"\n                      {...register('name', { required: 'Step Name is required' })}\n                      invalid={!!errors.name}\n                      placeholder=\"Step Name\"\n                    />\n                    <CFormFeedback invalid>Step Name is required</CFormFeedback>\n                  </CCol>\n\n                  {/* Step Number field */}\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Step Number</CFormLabel>\n                    <CFormInput\n                      type=\"number\"\n                      id=\"stepno\"\n                      {...register('stepno', { required: 'Step Number is required' })}\n                      invalid={!!errors.stepno}\n                      placeholder=\"Step Number\"\n                    />\n                    <CFormFeedback invalid>Step Number is required</CFormFeedback>\n                  </CCol>\n\n                  {/* Description field */}\n                  <CCol md={12}>\n                    <CFormLabel>Description</CFormLabel>\n                    <CFormTextarea\n                      id=\"description\"\n                      {...register('description', { required: 'Description is required' })}\n                      placeholder=\"Step Description\"\n                      rows=\"4\"\n                      invalid={!!errors.description}\n                    />\n                    <CFormFeedback invalid>Description is required</CFormFeedback>\n                  </CCol>\n\n                  {/* Image Upload field */}\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>\n                      Step Image\n                      <span className=\"errors\">Only png, jpg, webp, and jpeg images allowed</span>\n                    </CFormLabel>\n                    <CFormInput\n                      type=\"file\"\n                      id=\"image\"\n                      {...register('image')}\n                      onChange={handleFileUpload}\n                    />\n                  </CCol>\n                  <CCol md={6}>\n                    {newUrl && (\n                      <>\n                        <p>Image preview</p>\n                        <img\n                          src={newUrl}\n                          alt=\"preview\"\n                          style={{\n                            maxWidth: '40%',\n                            borderRadius: '10px',\n                            maxHeight: '40%',\n                          }}\n                        />\n                      </>\n                    )}\n                  </CCol>\n\n                  {/* Submit Button */}\n                  <CCol md={12} className=\"text-center submitButton\">\n                    {isLoading ? (\n                      <CButton disabled>\n                        <CSpinner component=\"span\" size=\"sm\" aria-hidden=\"true\" />\n                        Loading...\n                      </CButton>\n                    ) : (\n                      <CButton type=\"submit\" className=\"AddButton\">\n                        {isUpdate ? 'Update' : 'Add'}\n                      </CButton>\n                    )}\n                  </CCol>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default StepForm\n"],"names":["StepForm","register","setValue","handleSubmit","clearErrors","formState","errors","useForm","navigate","useNavigate","newUrl","setNewUrl","useState","isUpdate","setIsUpdate","recipeId","setRecipeId","isLoading","setIsLoading","state","useLocation","useEffect","id","console","log","editData","imageUrl","_id","name","stepno","description","recipeid","image","_jsx","className","children","CContainer","CRow","CCol","md","_jsxs","CCard","CCardHeader","CCardBody","ToastContainer","CForm","onSubmit","data","formData","FormData","Object","keys","forEach","key","undefined","append","updateStep","then","catch","err","response","success","toast","error","message","addStep","xl","CFormLabel","CFormInput","type","required","invalid","placeholder","CFormFeedback","CFormTextarea","rows","onChange","e","files","target","URL","createObjectURL","_Fragment","src","alt","style","maxWidth","borderRadius","maxHeight","CButton","disabled","CSpinner","component","size"],"sourceRoot":""}