{"version":3,"file":"static/js/901.40a1f911.chunk.js","mappings":"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","sources":["views/pages/plan/PlanForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CForm,\n  CFormFeedback,\n  CFormInput,\n  CFormLabel,\n  CRow,\n  CSpinner,\n  CFormSelect,\n} from '@coreui/react'\nimport { useForm } from 'react-hook-form'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { addPlan, updatePlan } from 'src/redux/api/api'\n\nconst PlanForm = () => {\n  const {\n    register,\n    getValues,\n    setValue,\n    handleSubmit,\n    clearErrors,\n    formState: { errors },\n  } = useForm()\n  const navigate = useNavigate()\n  const [isUpdate, setIsUpdate] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const { state } = useLocation()\n  const handleChange = async (fieldName, fieldValue) => {\n    clearErrors(fieldName, fieldValue)\n    setValue(fieldName, fieldValue)\n  }\n  const onSubmit = (data) => {\n    isUpdate === ''\n      ? addPlan(data)\n          .then((res) => {\n            navigate('/plan')\n          })\n          .catch((err) => {\n            if (!err.response.data.success) {\n              toast.error(err.response.data.message)\n            } else {\n              setIsLoading(false)\n            }\n          })\n      : updatePlan(data, isUpdate)\n          .then((res) => {\n            navigate('/plan')\n          })\n          .catch((err) => {\n            if (!err.response.data.success) {\n              toast.error('Must be Fill All Field required')\n            } else {\n              toast.error('Something Went Wrong!')\n            }\n            setIsLoading(false)\n          })\n  }\n  useEffect(() => {\n    if (state) {\n      const { editData } = state\n\n      setIsUpdate(editData._id)\n      setValue('duration', editData.duration)\n      setValue('amount', editData.amount)\n      setValue('day', editData.day)\n    }\n  }, [])\n  return (\n    <div className=\" bg-light min-vh-100\">\n      <CContainer className=\"mt-3\">\n        <CRow>\n          <CCol md={8}>\n            <CCard>\n              <CCardHeader>\n                <strong>Plan Form</strong>\n              </CCardHeader>\n              <CCardBody>\n                <ToastContainer />\n                <CForm className=\"row g-3 \" onSubmit={handleSubmit(onSubmit)}>\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Duration</CFormLabel>\n                    <CFormInput\n                      type=\"text\"\n                      id=\"validationDefault01\"\n                      {...register('duration', {\n                        required: 'Duration is required',\n                      })}\n                      placeholder=\" Duration\"\n                      invalid={!!errors.duration}\n                    />\n                    <CFormFeedback invalid>Duration is required</CFormFeedback>\n                  </CCol>\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Amount</CFormLabel>\n                    <CFormInput\n                      type=\"text\"\n                      id=\"validationDefault01\"\n                      {...register('amount', {\n                        required: 'Amount is required',\n                      })}\n                      placeholder=\"Plan Amount\"\n                      invalid={!!errors.amount}\n                    />\n                    <CFormFeedback invalid>Amount is required</CFormFeedback>\n                  </CCol>\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Day</CFormLabel>\n                    <CFormInput\n                      type=\"text\"\n                      id=\"validationDefault01\"\n                      {...register('day', {\n                        required: 'day is required',\n                      })}\n                      placeholder=\"Day\"\n                      invalid={!!errors.amount}\n                    />\n                    <CFormFeedback invalid>Day is required</CFormFeedback>\n                  </CCol>\n                  <CCol xl={6} md={12} className=\"text-center submitButton\">\n                    {isLoading ? (\n                      <CButton disabled>\n                        <CSpinner component=\"span\" size=\"sm\" aria-hidden=\"true\" />\n                        Loading...\n                      </CButton>\n                    ) : (\n                      <CButton type=\"submit\" className=\"AddButton\">\n                        {isUpdate === '' ? 'Add' : 'Update'}\n                      </CButton>\n                    )}\n                  </CCol>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default PlanForm\n"],"names":["PlanForm","register","getValues","setValue","handleSubmit","clearErrors","formState","errors","useForm","navigate","useNavigate","isUpdate","setIsUpdate","useState","isLoading","setIsLoading","state","useLocation","useEffect","editData","_id","duration","amount","day","_jsx","className","children","CContainer","CRow","CCol","md","_jsxs","CCard","CCardHeader","CCardBody","ToastContainer","CForm","onSubmit","data","addPlan","then","res","catch","err","response","success","toast","error","message","updatePlan","xl","CFormLabel","CFormInput","type","id","required","placeholder","invalid","CFormFeedback","CButton","disabled","CSpinner","component","size"],"sourceRoot":""}