{"version":3,"file":"static/js/478.92a9c036.chunk.js","mappings":"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","sources":["views/pages/auth/Login.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport {\n  CContainer,\n  CRow,\n  CCol,\n  CCard,\n  CCardGroup,\n  CCardBody,\n  CForm,\n  CInputGroup,\n  CInputGroupText,\n  CFormInput,\n  CButton,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport { NavLink, useNavigate } from 'react-router-dom'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { useDispatch } from 'react-redux'\nimport { adminLogin } from 'src/redux/api/api'\nimport { LOGIN_SUCCESS } from 'src/redux/actions/action'\nimport Cookies from 'js-cookie'\n\nconst Login = () => {\n  const { register, handleSubmit } = useForm()\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState()\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const onSubmit = async (data) => {\n    setError('')\n    setIsLoading(true)\n    try {\n      const res = await adminLogin(data)\n      if (res.status === 400 || res.data.success === false) {\n        setError(res.data.message)\n\n        setIsLoading(false)\n      } else {\n        Cookies.set('accessToken', res.data.info.admin.accessToken, {\n          sameSite: 'Strict',\n          secure: true,\n        })\n        Cookies.set('refreshToken', res.data.info.refresh_token, {\n          sameSite: 'Strict',\n          secure: true,\n        })\n        localStorage.setItem('refreshToken', res.data.info.refresh_token)\n\n        const adminObject = {\n          name: res.data.info.admin.name,\n          id: res.data.info.admin._id,\n          email: res.data.info.admin.email,\n          img: res.data.info.admin.image ? res.data.info.baseUrl + res.data.info.admin.image : null,\n        }\n        Cookies.set('admin', JSON.stringify(adminObject), { sameSite: 'Strict', secure: true })\n        setIsLoading(false)\n        dispatch({\n          type: LOGIN_SUCCESS,\n          data,\n        })\n        navigate('/dashboard')\n      }\n    } catch (err) {\n      console.log(err)\n      if (err.response && (err.response.status === 401 || !err.response.data.success)) {\n        setError(err.response.data.message)\n        // toast.error(err.response.data.message)\n        setIsLoading(false)\n      } else {\n        setError('Something is wrong!')\n        setIsLoading(false)\n      }\n    }\n  }\n\n  return (\n    <div className=\"login-page bg-light min-vh-100\">\n      <ToastContainer />\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol lg={4} md={6} sm={6}>\n            <CCardGroup>\n              <CCard className=\"p-4\" style={{ backgroundColor: '#ffffff9c ' }}>\n                <CCardBody style={{ backgroundColor: 'ff5733' }}>\n                  <CForm onSubmit={handleSubmit(onSubmit)}>\n                    <h1 className=\"text-center mb-4\">Login</h1>\n                    <p className=\"text-medium-emphasis text-center text-black\">\n                      Sign In to your account\n                    </p>\n                    <div in={error}>\n                      <b>\n                        <p className=\"errors\" style={{ textShadow: '0px 0px 2px black' }}>\n                          {error ? (\n                            <>\n                              {' '}\n                              {error} <span hidden={true}>{toast.error(error)} </span>{' '}\n                            </>\n                          ) : (\n                            ''\n                          )}\n                        </p>\n                      </b>\n                    </div>\n                    <CInputGroup className=\"mb-2\">\n                      <CInputGroupText>\n                        <CIcon icon={cilUser} />\n                      </CInputGroupText>\n                      <ToastContainer />\n                      <CFormInput\n                        className=\"login-input\"\n                        {...register('email', { required: 'Email is required' })}\n                        placeholder=\"Enter Email\"\n                        autoComplete=\"email\"\n                      />\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-4\">\n                      <CInputGroupText>\n                        <CIcon icon={cilLockLocked} />\n                      </CInputGroupText>\n                      <CFormInput\n                        className=\"login-input\"\n                        {...register('password', { required: 'Password is required' })}\n                        type=\"password\"\n                        placeholder=\"Enter Password\"\n                        autoComplete=\"current-password\"\n                      />\n                    </CInputGroup>\n                    <CRow>\n                      <CCol lg={12} md={6} xs={12} className=\"mb-3 mb-md-0 mt-2\">\n                        <CButton type=\"submit\" className=\"w-100 custom-color\" disabled={isLoading}>\n                          {isLoading ? 'Loading...' : 'Login'}\n                        </CButton>\n                      </CCol>\n                    </CRow>\n                  </CForm>\n                </CCardBody>\n              </CCard>\n            </CCardGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Login\n"],"names":["Login","register","handleSubmit","useForm","isLoading","setIsLoading","useState","error","setError","navigate","useNavigate","dispatch","useDispatch","_jsxs","className","children","_jsx","ToastContainer","CContainer","CRow","CCol","lg","md","sm","CCardGroup","CCard","style","backgroundColor","CCardBody","CForm","onSubmit","async","res","adminLogin","data","status","success","message","Cookies","set","info","admin","accessToken","sameSite","secure","refresh_token","localStorage","setItem","adminObject","name","id","_id","email","img","image","baseUrl","JSON","stringify","type","LOGIN_SUCCESS","err","console","log","response","in","textShadow","_Fragment","hidden","toast","CInputGroup","CInputGroupText","CIcon","icon","cilUser","CFormInput","required","placeholder","autoComplete","cilLockLocked","xs","CButton","disabled"],"sourceRoot":""}