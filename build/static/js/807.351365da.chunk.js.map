{"version":3,"file":"static/js/807.351365da.chunk.js","mappings":"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","sources":["views/pages/setting/NotificationForm.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CContainer,\n  CForm,\n  CFormFeedback,\n  CFormInput,\n  CFormLabel,\n  CRow,\n  CSpinner,\n  CFormSelect,\n} from '@coreui/react'\nimport { useForm } from 'react-hook-form'\nimport { addNotification, updateNotification } from 'src/redux/api/api'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport { ToastContainer, toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\nconst NotificationForm = () => {\n  const {\n    register,\n    getValues,\n    setValue,\n    handleSubmit,\n    clearErrors,\n    formState: { errors },\n  } = useForm()\n\n  const navigate = useNavigate()\n  const [newUrl, setNewUrl] = useState('')\n  const [isUpdate, setIsUpdate] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const { state } = useLocation()\n\n  const handleFileUpload = (e) => {\n    const files = e.target.files[0]\n    if (files) {\n      const imageUrl = URL.createObjectURL(files)\n      setNewUrl(imageUrl)\n    } else {\n      setNewUrl('')\n    }\n  }\n\n  const onSubmit = (data) => {\n    isUpdate === ''\n      ? addNotification(data)\n          .then(() => navigate('/Notification'))\n          .catch((err) => {\n            toast.error(err.response?.data?.message || 'Something went wrong!')\n            setIsLoading(false)\n          })\n      : updateNotification(data, isUpdate)\n          .then(() => navigate('/Notification'))\n          .catch((err) => {\n            toast.error(err.response?.data?.message || 'Something went wrong!')\n            setIsLoading(false)\n          })\n  }\n\n  useEffect(() => {\n    if (state) {\n      const { editData, imageUrl } = state\n      console.log(state)\n      setIsUpdate(editData._id)\n      setValue('title', editData.title)\n      setValue('description', editData.description)\n      setNewUrl(imageUrl + editData.image)\n    }\n  }, [state, setValue])\n\n  return (\n    <div className=\"bg-light min-vh-100\">\n      <CContainer className=\"mt-3\">\n        <CRow>\n          <CCol md={8}>\n            <CCard>\n              <CCardHeader>\n                <strong>Notification Form</strong>\n              </CCardHeader>\n              <CCardBody>\n                <ToastContainer />\n                <CForm className=\"row g-3\" onSubmit={handleSubmit(onSubmit)}>\n                  {/* Title field */}\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Title</CFormLabel>\n                    <CFormInput\n                      type=\"text\"\n                      id=\"title\"\n                      {...register('title', { required: 'Title is required' })}\n                      invalid={!!errors.title}\n                      placeholder=\"Title\"\n                    />\n                    <CFormFeedback invalid>Title is required</CFormFeedback>\n                  </CCol>\n\n                  {/* Description field */}\n                  <CCol xl={6} md={12}>\n                    <CFormLabel>Description</CFormLabel>\n                    <CFormInput\n                      type=\"text\"\n                      id=\"description\"\n                      {...register('description', { required: 'Description is required' })}\n                      invalid={!!errors.description}\n                      placeholder=\"Description\"\n                    />\n                    <CFormFeedback invalid>Description is required</CFormFeedback>\n                  </CCol>\n\n                  {/* Submit button */}\n                  <CCol md={12} className=\"text-center submitButton\">\n                    {isLoading ? (\n                      <CButton disabled>\n                        <CSpinner component=\"span\" size=\"sm\" aria-hidden=\"true\" />\n                        Loading...\n                      </CButton>\n                    ) : (\n                      <CButton type=\"submit\" className=\"AddButton\">\n                        {isUpdate === '' ? 'Add' : 'Update'}\n                      </CButton>\n                    )}\n                  </CCol>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default NotificationForm\n"],"names":["NotificationForm","register","getValues","setValue","handleSubmit","clearErrors","formState","errors","useForm","navigate","useNavigate","newUrl","setNewUrl","useState","isUpdate","setIsUpdate","isLoading","setIsLoading","state","useLocation","useEffect","editData","imageUrl","console","log","_id","title","description","image","_jsx","className","children","CContainer","CRow","CCol","md","_jsxs","CCard","CCardHeader","CCardBody","ToastContainer","CForm","onSubmit","data","addNotification","then","catch","err","_err$response","_err$response$data","toast","error","response","message","updateNotification","_err$response2","_err$response2$data","xl","CFormLabel","CFormInput","type","id","required","invalid","placeholder","CFormFeedback","CButton","disabled","CSpinner","component","size"],"sourceRoot":""}